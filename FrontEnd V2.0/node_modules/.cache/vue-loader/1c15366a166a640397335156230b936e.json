{"remainingRequest":"C:\\Users\\DELL\\Desktop\\Cesi-Eats\\FrontEnd V2.0\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\DELL\\Desktop\\Cesi-Eats\\FrontEnd V2.0\\src\\views\\Home.vue?vue&type=template&id=fae5bece&scoped=true&","dependencies":[{"path":"C:\\Users\\DELL\\Desktop\\Cesi-Eats\\FrontEnd V2.0\\src\\views\\Home.vue","mtime":1656670745479},{"path":"C:\\Users\\DELL\\Desktop\\Cesi-Eats\\FrontEnd V2.0\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1656671404342},{"path":"C:\\Users\\DELL\\Desktop\\Cesi-Eats\\FrontEnd V2.0\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1656671400184},{"path":"C:\\Users\\DELL\\Desktop\\Cesi-Eats\\FrontEnd V2.0\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1656671404342},{"path":"C:\\Users\\DELL\\Desktop\\Cesi-Eats\\FrontEnd V2.0\\node_modules\\vue-loader\\lib\\index.js","mtime":1656671396869}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}