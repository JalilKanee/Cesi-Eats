{"remainingRequest":"C:\\Users\\Jalil\\Desktop\\V2.0\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\Jalil\\Desktop\\V2.0\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\Jalil\\Desktop\\V2.0\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Jalil\\Desktop\\V2.0\\src\\components\\RestaurateurComponents\\MenuAdd.vue?vue&type=template&id=8c31ed84&","dependencies":[{"path":"C:\\Users\\Jalil\\Desktop\\V2.0\\src\\components\\RestaurateurComponents\\MenuAdd.vue","mtime":1655982518596},{"path":"C:\\Users\\Jalil\\Desktop\\V2.0\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1656358477747},{"path":"C:\\Users\\Jalil\\Desktop\\V2.0\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1656358519816},{"path":"C:\\Users\\Jalil\\Desktop\\V2.0\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1656358477747},{"path":"C:\\Users\\Jalil\\Desktop\\V2.0\\node_modules\\vue-loader\\lib\\index.js","mtime":1656358496013}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}