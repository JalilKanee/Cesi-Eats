{"ast":null,"code":"import \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.function.name.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nvar resizeTimeout;\n\nfunction resizeThrottler(actualResizeHandler) {\n  // ignore resize events as long as an actualResizeHandler execution is in the queue\n  if (!resizeTimeout) {\n    resizeTimeout = setTimeout(function () {\n      resizeTimeout = null;\n      actualResizeHandler(); // The actualResizeHandler will execute at a rate of 15fps\n    }, 66);\n  }\n}\n\nimport NotificationService from \"@/services/NotificationService\";\nimport MobileMenu from \"@/layout/MobileMenu\";\nexport default {\n  components: {\n    MobileMenu: MobileMenu\n  },\n  props: {\n    type: {\n      type: String,\n      default: \"white\",\n      validator: function validator(value) {\n        return [\"white\", \"default\", \"primary\", \"danger\", \"success\", \"warning\", \"info\"].includes(value);\n      }\n    },\n    colorOnScroll: {\n      type: Number,\n      default: 0\n    }\n  },\n  data: function data() {\n    return {\n      Notifications: [],\n      currentTutorial: null,\n      currentIndex: -1,\n      title: \"\",\n      extraNavClasses: \"\",\n      toggledClass: false\n    };\n  },\n  computed: {\n    showDownload: function showDownload() {\n      var _this = this;\n\n      var excludedRoutes = [\"login\", \"landing\", \"profile\"];\n      return excludedRoutes.every(function (r) {\n        return r !== _this.$route.name;\n      });\n    }\n  },\n  methods: {\n    retrieveNotifications: function retrieveNotifications() {\n      var _this2 = this;\n\n      NotificationService.getAll().then(function (response) {\n        _this2.Notifications = response.data;\n        console.log(response.data);\n      }).catch(function (e) {\n        console.log(e);\n      });\n    },\n    bodyClick: function bodyClick() {\n      var bodyClick = document.getElementById(\"bodyClick\");\n\n      if (bodyClick === null) {\n        var body = document.querySelector(\"body\");\n        var elem = document.createElement(\"div\");\n        elem.setAttribute(\"id\", \"bodyClick\");\n        body.appendChild(elem);\n\n        var _bodyClick = document.getElementById(\"bodyClick\");\n\n        _bodyClick.addEventListener(\"click\", this.toggleNavbarMobile);\n      } else {\n        bodyClick.remove();\n      }\n    },\n    toggleNavbarMobile: function toggleNavbarMobile() {\n      this.NavbarStore.showNavbar = !this.NavbarStore.showNavbar;\n      this.toggledClass = !this.toggledClass;\n      this.bodyClick();\n    },\n    handleScroll: function handleScroll() {\n      var scrollValue = document.body.scrollTop || document.documentElement.scrollTop;\n      var navbarColor = document.getElementById(\"toolbar\");\n      this.currentScrollValue = scrollValue;\n\n      if (this.colorOnScroll > 0 && scrollValue > this.colorOnScroll) {\n        this.extraNavClasses = \"md-\".concat(this.type);\n        navbarColor.classList.remove(\"md-transparent\");\n      } else {\n        if (this.extraNavClasses) {\n          this.extraNavClasses = \"\";\n          navbarColor.classList.add(\"md-transparent\");\n        }\n      }\n    },\n    scrollListener: function scrollListener() {\n      resizeThrottler(this.handleScroll);\n    },\n    scrollToElement: function scrollToElement() {\n      var element_id = document.getElementById(\"downloadSection\");\n\n      if (element_id) {\n        element_id.scrollIntoView({\n          block: \"end\",\n          behavior: \"smooth\"\n        });\n      }\n    }\n  },\n  mounted: function mounted() {\n    this.retrieveNotifications();\n    document.addEventListener(\"scroll\", this.scrollListener);\n  },\n  beforeDestroy: function beforeDestroy() {\n    document.removeEventListener(\"scroll\", this.scrollListener);\n  }\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6IA;;AACA;EACA;EACA;IACAA;MACAA;MACAC,sBAFA,CAIA;IACA,CALA,EAKA,EALA;EAMA;AACA;;AACA;AACA;AACA;EACAC;IACAC;EADA,CADA;EAIAC;IACAC;MACAA,YADA;MAEAC,gBAFA;MAGAC,SAHA,qBAGAC,KAHA,EAGA;QACA,QACA,OADA,EAEA,SAFA,EAGA,SAHA,EAIA,QAJA,EAKA,SALA,EAMA,SANA,EAOA,MAPA,EAQAC,QARA,CAQAD,KARA;MASA;IAbA,CADA;IAgBAE;MACAL,YADA;MAEAC;IAFA;EAhBA,CAJA;EAyBAK,IAzBA,kBAyBA;IACA;MACAC,iBADA;MAEAC,qBAFA;MAGAC,gBAHA;MAIAC,SAJA;MAMAC,mBANA;MAOAC;IAPA;EASA,CAnCA;EAoCAC;IACAC,YADA,0BACA;MAAA;;MACA;MACA;QAAA;MAAA;IACA;EAJA,CApCA;EA0CAC;IACAC,qBADA,mCACA;MAAA;;MACAC,6BACAC,IADA,CACA;QACA;QACAC;MACA,CAJA,EAKAC,KALA,CAKA;QACAD;MACA,CAPA;IAQA,CAVA;IAWAE,SAXA,uBAWA;MACA;;MAEA;QACA;QACA;QACAC;QACAC;;QAEA;;QACAF;MACA,CARA,MAQA;QACAA;MACA;IACA,CAzBA;IA0BAG,kBA1BA,gCA0BA;MACA;MACA;MACA;IACA,CA9BA;IA+BAC,YA/BA,0BA+BA;MACA,kBACAC,6DADA;MAEA;MACA;;MACA;QACA;QACAC;MACA,CAHA,MAGA;QACA;UACA;UACAA;QACA;MACA;IACA,CA7CA;IA8CAC,cA9CA,4BA8CA;MACAC;IACA,CAhDA;IAiDAC,eAjDA,6BAiDA;MACA;;MACA;QACAC;UAAAC;UAAAC;QAAA;MACA;IACA;EAtDA,CA1CA;EAkGAC,OAlGA,qBAkGA;IACA;IACAR;EACA,CArGA;EAsGAS,aAtGA,2BAsGA;IACAT;EACA;AAxGA","names":["resizeTimeout","actualResizeHandler","components","MobileMenu","props","type","default","validator","value","includes","colorOnScroll","data","Notifications","currentTutorial","currentIndex","title","extraNavClasses","toggledClass","computed","showDownload","methods","retrieveNotifications","NotificationService","then","console","catch","bodyClick","elem","body","toggleNavbarMobile","handleScroll","document","navbarColor","scrollListener","resizeThrottler","scrollToElement","element_id","block","behavior","mounted","beforeDestroy"],"sourceRoot":"src/layout","sources":["ClientNavbar.vue"],"sourcesContent":["<template>\r\n  <md-toolbar\r\n    id=\"toolbar\"\r\n    md-elevation=\"0\"\r\n    class=\"md-transparent md-absolute\"\r\n    :class=\"extraNavClasses\"\r\n    :color-on-scroll=\"colorOnScroll\"\r\n  >\r\n    <div class=\"md-toolbar-row md-collapse-lateral\" >\r\n      <div class=\"md-toolbar-section-start\">\r\n        <a href=\"/\">\r\n          <img alt=\"Vue logo\" src=\"@/assets/logo.png\" class=\"logoimg\" style=\"width: 15%;\">\r\n        </a>\r\n      </div>\r\n      <div class=\"md-toolbar-section-end\">\r\n        <md-button \r\n          class=\"md-just-icon md-simple md-toolbar-toggle\"\r\n          :class=\"{ toggled: toggledClass }\"\r\n          @click=\"toggleNavbarMobile()\"\r\n        >\r\n          <span class=\"icon-bar\"></span>\r\n          <span class=\"icon-bar\"></span>\r\n          <span class=\"icon-bar\"></span>\r\n        </md-button>\r\n\r\n        <div class=\"md-collapse\">\r\n          <div class=\"md-collapse-wrapper\">\r\n            <mobile-menu nav-mobile-section-start=\"false\">\r\n              <!-- Here you can add your items from the section-start of your toolbar -->\r\n            </mobile-menu>\r\n            <md-toolbar class=\"md-info\" style=\"box-shadow: none;\">\r\n            <div class=\"md-toolbar-row\">\r\n              \r\n              <div class=\"md-toolbar-section-end\">\r\n                <md-button\r\n                  class=\"md-just-icon md-simple md-white md-toolbar-toggle\"\r\n                >\r\n                  <span class=\"icon-bar\"></span>\r\n                  <span class=\"icon-bar\"></span>\r\n                  <span class=\"icon-bar\"></span>\r\n                </md-button>\r\n\r\n                <div class=\"md-collapse\">\r\n                  <md-list>\r\n                    <li class=\"md-list-item\">\r\n                      <a\r\n                        href=\"javascript:void(0)\"\r\n                        class=\"md-list-item-router md-list-item-container md-button-clean dropdown\"\r\n                      >\r\n                      <div class=\"md-list-item-content\">\r\n                          <drop-down direction=\"down\">\r\n                            <md-button\r\n                              slot=\"title\"\r\n                              class=\"md-button md-button-link md-white md-simple md-just-icon\"\r\n                              data-toggle=\"dropdown\"\r\n                            >\r\n                              <md-icon>notifications</md-icon>\r\n                            </md-button>\r\n                            <ul class=\"dropdown-menu dropdown-menu-right\">\r\n                              <center><li class=\"dropdown-header\">Vos notifications</li></center>\r\n                            <li>\r\n                                <p :class=\"{ active: index == currentIndex }\"\r\n          v-for=\"(Notification, index) in Notifications\"\r\n          :key=\"index\" style=\"color:black;margin:20px;\" class=\"dropdown-item\"\r\n                                  >{{Notification.message}}</p>\r\n                                \r\n                              </li>\r\n\r\n                               \r\n                              \r\n                              \r\n                            </ul>\r\n                          </drop-down>\r\n                        </div>\r\n                        <div class=\"md-list-item-content\">\r\n                          \r\n                            <a href=\"#\">\r\n                            <md-button\r\n                              slot=\"title\"\r\n                              class=\"md-button md-button-link md-white md-simple md-just-icon\"\r\n                              \r\n                            >\r\n                              <router-link :to=\"{path : '/client/profile'}\" ><md-icon>person</md-icon></router-link>\r\n                            </md-button></a>\r\n                            \r\n                          \r\n                        </div>\r\n                        <div class=\"md-list-item-content\">\r\n                          <drop-down direction=\"down\">\r\n                            \r\n                            <md-button\r\n                              slot=\"title\"\r\n                              class=\"md-button md-button-link md-white md-simple md-just-icon\"\r\n                              data-toggle=\"dropdown\"\r\n                            >\r\n                              <router-link :to=\"{path : '/client/cart'}\" >\r\n                              <md-icon>shopping_cart</md-icon></router-link>\r\n                            </md-button>\r\n                            \r\n                            <md-button\r\n                              slot=\"title\"\r\n                              class=\"md-button md-button-link md-white md-simple md-just-icon\"\r\n                              data-toggle=\"dropdown\"\r\n                            >\r\n                               \r\n                               <md-icon>settings</md-icon>\r\n                            </md-button>\r\n                            <ul class=\"dropdown-menu dropdown-menu-right\">\r\n                              <center><li class=\"dropdown-header\">Paramètre</li></center>\r\n                              <li>\r\n                                <a href=\"#/client/displayarticle\" class=\"dropdown-item\"\r\n                                  >Voir les articles</a\r\n                                >\r\n                              </li>\r\n                              \r\n                              <li class=\"dropdown-divider\"></li>\r\n                              <li>\r\n                                <a href=\"#\" class=\"dropdown-item\"\r\n                                  >Se déconnecter</a\r\n                                >\r\n                              </li>\r\n                            </ul>\r\n                          </drop-down>\r\n                        </div>\r\n                      </a>\r\n                    </li>\r\n                  </md-list>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </md-toolbar>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </md-toolbar>\r\n</template>\r\n\r\n\r\n\r\n<script>\r\nlet resizeTimeout;\r\nfunction resizeThrottler(actualResizeHandler) {\r\n  // ignore resize events as long as an actualResizeHandler execution is in the queue\r\n  if (!resizeTimeout) {\r\n    resizeTimeout = setTimeout(() => {\r\n      resizeTimeout = null;\r\n      actualResizeHandler();\r\n\r\n      // The actualResizeHandler will execute at a rate of 15fps\r\n    }, 66);\r\n  }\r\n}\r\nimport NotificationService from \"@/services/NotificationService\";\r\nimport MobileMenu from \"@/layout/MobileMenu\";\r\nexport default {\r\n  components: {\r\n    MobileMenu\r\n  },\r\n  props: {\r\n    type: {\r\n      type: String,\r\n      default: \"white\",\r\n      validator(value) {\r\n        return [\r\n          \"white\",\r\n          \"default\",\r\n          \"primary\",\r\n          \"danger\",\r\n          \"success\",\r\n          \"warning\",\r\n          \"info\"\r\n        ].includes(value);\r\n      }\r\n    },\r\n    colorOnScroll: {\r\n      type: Number,\r\n      default: 0\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n    Notifications: [],\r\n      currentTutorial: null,\r\n      currentIndex: -1,\r\n      title: \"\",\r\n\r\n      extraNavClasses: \"\",\r\n      toggledClass: false\r\n    };\r\n  },\r\n  computed: {\r\n    showDownload() {\r\n      const excludedRoutes = [\"login\", \"landing\", \"profile\"];\r\n      return excludedRoutes.every(r => r !== this.$route.name);\r\n    }\r\n  },\r\n  methods: {\r\n    retrieveNotifications() {\r\n        NotificationService.getAll()\r\n        .then(response => {\r\n            this.Notifications = response.data ;\r\n            console.log(response.data);\r\n        })\r\n        .catch(e => {\r\n            console.log(e);\r\n        });\r\n    },\r\n    bodyClick() {\r\n      let bodyClick = document.getElementById(\"bodyClick\");\r\n\r\n      if (bodyClick === null) {\r\n        let body = document.querySelector(\"body\");\r\n        let elem = document.createElement(\"div\");\r\n        elem.setAttribute(\"id\", \"bodyClick\");\r\n        body.appendChild(elem);\r\n\r\n        let bodyClick = document.getElementById(\"bodyClick\");\r\n        bodyClick.addEventListener(\"click\", this.toggleNavbarMobile);\r\n      } else {\r\n        bodyClick.remove();\r\n      }\r\n    },\r\n    toggleNavbarMobile() {\r\n      this.NavbarStore.showNavbar = !this.NavbarStore.showNavbar;\r\n      this.toggledClass = !this.toggledClass;\r\n      this.bodyClick();\r\n    },\r\n    handleScroll() {\r\n      let scrollValue =\r\n        document.body.scrollTop || document.documentElement.scrollTop;\r\n      let navbarColor = document.getElementById(\"toolbar\");\r\n      this.currentScrollValue = scrollValue;\r\n      if (this.colorOnScroll > 0 && scrollValue > this.colorOnScroll) {\r\n        this.extraNavClasses = `md-${this.type}`;\r\n        navbarColor.classList.remove(\"md-transparent\");\r\n      } else {\r\n        if (this.extraNavClasses) {\r\n          this.extraNavClasses = \"\";\r\n          navbarColor.classList.add(\"md-transparent\");\r\n        }\r\n      }\r\n    },\r\n    scrollListener() {\r\n      resizeThrottler(this.handleScroll);\r\n    },\r\n    scrollToElement() {\r\n      let element_id = document.getElementById(\"downloadSection\");\r\n      if (element_id) {\r\n        element_id.scrollIntoView({ block: \"end\", behavior: \"smooth\" });\r\n      }\r\n    }\r\n  },\r\n  mounted() {\r\n     this.retrieveNotifications();\r\n    document.addEventListener(\"scroll\", this.scrollListener);\r\n  },\r\n  beforeDestroy() {\r\n    document.removeEventListener(\"scroll\", this.scrollListener);\r\n  }\r\n};\r\n</script>\r\n"]},"metadata":{},"sourceType":"module"}