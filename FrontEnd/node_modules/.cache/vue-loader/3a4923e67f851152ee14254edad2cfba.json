{"remainingRequest":"C:\\Users\\Jalil\\Desktop\\V2.0\\node_modules\\@vue\\vue-loader-v15\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\Jalil\\Desktop\\V2.0\\node_modules\\cache-loader\\dist\\cjs.js??ruleSet[0].rules[0].use[0]!C:\\Users\\Jalil\\Desktop\\V2.0\\node_modules\\@vue\\vue-loader-v15\\lib\\index.js??vue-loader-options!C:\\Users\\Jalil\\Desktop\\V2.0\\src\\views\\components\\TabsSection.vue?vue&type=template&id=083e7b88&","dependencies":[{"path":"C:\\Users\\Jalil\\Desktop\\V2.0\\src\\views\\components\\TabsSection.vue","mtime":1607335908000},{"path":"C:\\Users\\Jalil\\Desktop\\V2.0\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1656358477747},{"path":"C:\\Users\\Jalil\\Desktop\\V2.0\\node_modules\\@vue\\vue-loader-v15\\lib\\loaders\\templateLoader.js","mtime":1655795075580},{"path":"C:\\Users\\Jalil\\Desktop\\V2.0\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1656358477747},{"path":"C:\\Users\\Jalil\\Desktop\\V2.0\\node_modules\\@vue\\vue-loader-v15\\lib\\index.js","mtime":1655795068176}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}