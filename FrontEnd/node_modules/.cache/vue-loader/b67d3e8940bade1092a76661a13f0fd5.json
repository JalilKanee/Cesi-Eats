{"remainingRequest":"C:\\Users\\Jalil\\Desktop\\Cesi Eats\\FrontEnd\\node_modules\\@vue\\vue-loader-v15\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\Jalil\\Desktop\\node_modules\\cache-loader\\dist\\cjs.js??ruleSet[0].rules[0].use[0]!C:\\Users\\Jalil\\Desktop\\Cesi Eats\\FrontEnd\\node_modules\\@vue\\vue-loader-v15\\lib\\index.js??vue-loader-options!C:\\Users\\Jalil\\Desktop\\Cesi Eats\\FrontEnd\\src\\components\\RestaurateurComponents\\ArticleEdit.vue?vue&type=template&id=18713cc8&","dependencies":[{"path":"C:\\Users\\Jalil\\Desktop\\Cesi Eats\\FrontEnd\\src\\components\\RestaurateurComponents\\ArticleEdit.vue","mtime":1655982568166},{"path":"C:\\Users\\Jalil\\Desktop\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1656358477747},{"path":"C:\\Users\\Jalil\\Desktop\\Cesi Eats\\FrontEnd\\node_modules\\@vue\\vue-loader-v15\\lib\\loaders\\templateLoader.js","mtime":1655795075580},{"path":"C:\\Users\\Jalil\\Desktop\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1656358477747},{"path":"C:\\Users\\Jalil\\Desktop\\Cesi Eats\\FrontEnd\\node_modules\\@vue\\vue-loader-v15\\lib\\index.js","mtime":1655795068176}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}